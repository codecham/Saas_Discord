// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ma/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  
  // Identité Discord
  discordId     String   @unique  // ID Discord (source de vérité)
  username      String              // Username Discord
  discriminator String?             // Discriminator (#0000) - peut être null maintenant
  globalName    String?             // Display name Discord
  avatar        String?             // Avatar hash Discord
  email         String?             // Email Discord (peut être null)
  
  // Tokens Discord (chiffrés)
  accessToken       String         // Token d'accès chiffré
  refreshToken      String         // Token de refresh chiffré
  tokenExpiresAt    DateTime       // Expiration du token
  tokenScope        String         // Scopes accordés (ex: "identify guilds email")
  
  // Métadonnées app
  isActive  Boolean  @default(true)
  role      Role     @default(USER)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime @default(now())
  
  // Relations
  refreshTokens RefreshToken[]  // Tes JWT refresh tokens
  
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model Guild {
  id             String  @id @default(cuid())
  guildId        String  @unique @map("discord_guild_id")
  name           String
  icon           String?
  ownerDiscordId String  @map("owner_discord_id")
  
  // Status
  botAddedAt   DateTime  @default(now()) @map("bot_added_at")
  botRemovedAt DateTime? @map("bot_removed_at")
  isActive     Boolean   @default(true) @map("is_active")
  
  // Relations
  settings GuildSettings?
  
  // Métadonnées
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("guilds")
}

model GuildSettings {
  id                    String   @id @default(cuid())
  guildId               String   @unique @map("guild_id")
  
  // ═══════════════════════════════════════
  // INITIALISATION
  // ═══════════════════════════════════════
  initializationStatus  String   @default("pending") @map("initialization_status")
  // Values: "pending" | "initializing" | "ready" | "error" | "partial"
  
  initializationError   String?  @map("initialization_error")
  initializedAt         DateTime? @map("initialized_at")
  
  // ═══════════════════════════════════════
  // MODULES ACTIVÉS
  // ═══════════════════════════════════════
  moduleStats           Boolean  @default(true) @map("module_stats")
  moduleModeration      Boolean  @default(false) @map("module_moderation")
  moduleInvites         Boolean  @default(true) @map("module_invites")
  moduleAutomod         Boolean  @default(false) @map("module_automod")
  moduleWelcome         Boolean  @default(false) @map("module_welcome")
  
  // ═══════════════════════════════════════
  // CONFIGURATION STATS
  // ═══════════════════════════════════════
  statsBackfillDays     Int      @default(0) @map("stats_backfill_days")
  // 0 = pas de backfill, 7 = optionnel free, 30/60/90 = premium
  
  statsBackfillStatus   String   @default("none") @map("stats_backfill_status")
  // Values: "none" | "requested" | "in_progress" | "completed" | "failed"
  
  statsBackfillProgress Int      @default(0) @map("stats_backfill_progress")
  // Pourcentage 0-100
  
  statsRetentionDays    Int      @default(90) @map("stats_retention_days")
  statsBackfilledAt     DateTime? @map("stats_backfilled_at")
  
  // ═══════════════════════════════════════
  // CONFIGURATION MODÉRATION
  // ═══════════════════════════════════════
  modLogChannelId       String?  @map("mod_log_channel_id")
  autoModLevel          String   @default("medium") @map("automod_level")
  // Values: "off" | "low" | "medium" | "high"
  
  // ═══════════════════════════════════════
  // CONFIGURATION INVITES
  // ═══════════════════════════════════════
  trackInvites          Boolean  @default(true) @map("track_invites")
  inviteAnalytics       Boolean  @default(true) @map("invite_analytics")
  
  // ═══════════════════════════════════════
  // LOCALE & TIMEZONE
  // ═══════════════════════════════════════
  locale                String   @default("en") @map("locale")
  timezone              String   @default("UTC") @map("timezone")
  
  // ═══════════════════════════════════════
  // PERMISSIONS (Role IDs)
  // ═══════════════════════════════════════
  adminRoleIds          String[] @default([]) @map("admin_role_ids")
  modRoleIds            String[] @default([]) @map("mod_role_ids")
  
  // ═══════════════════════════════════════
  // MÉTADONNÉES
  // ═══════════════════════════════════════
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  // Relation
  guild                 Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  
  @@map("guild_settings")
}


enum Role {
  USER
  ADMIN
  MODERATOR
}


// ============================================
// TimescaleDB Tables
// ============================================

/// Events bruts Discord (Hypertable TimescaleDB)
/// Rétention : 30 jours
model Event {
  id        BigInt   @default(autoincrement())
  
  // Métadonnées obligatoires
  type      String
  guildId   String   @map("guild_id") @db.VarChar(20)
  timestamp DateTime @db.Timestamptz
  
  // Métadonnées optionnelles
  userId    String?  @map("user_id") @db.VarChar(20)
  channelId String?  @map("channel_id") @db.VarChar(20)
  messageId String?  @map("message_id") @db.VarChar(20)
  roleId    String?  @map("role_id") @db.VarChar(20)
  shardId   Int?     @map("shard_id")
  
  // Données complètes
  data      Json?    @db.JsonB
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@id([id, timestamp])  // ← PK composite avec timestamp
  @@map("events")
}


/// Statistiques cumulatives par membre
/// 🆕 ENRICHI pour Stats V2
model MemberStats {
  id        String   @id @default(cuid())
  
  // Identification
  guildId   String   @map("guild_id") @db.VarChar(20)
  userId    String   @map("user_id") @db.VarChar(20)
  
  // Compteurs cumulatifs
  totalMessages          Int      @default(0) @map("total_messages")
  totalVoiceMinutes      Int      @default(0) @map("total_voice_minutes")
  totalReactionsGiven    Int      @default(0) @map("total_reactions_given")
  totalReactionsReceived Int      @default(0) @map("total_reactions_received")
  
  // 🆕 Stats V2 - Messages détaillés
  messagesDeleted        Int      @default(0) @map("messages_deleted")
  messagesEdited         Int      @default(0) @map("messages_edited")
  
  // Dernière activité
  lastMessageAt DateTime? @map("last_message_at") @db.Timestamptz
  lastVoiceAt   DateTime? @map("last_voice_at") @db.Timestamptz
  lastSeen      DateTime? @map("last_seen") @db.Timestamptz
  
  // Metadata
  joinedAt  DateTime? @map("joined_at") @db.Timestamptz
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@map("member_stats")
  @@unique([guildId, userId], name: "idx_member_stats_unique")
}

// ============================================
// STATS V2 - New Tables
// ============================================

/// Stats quotidiennes par membre et channel
/// Rétention : 90 jours
model StatsDaily {
  // Identification (PK composite)
  guildId   String   @map("guild_id") @db.VarChar(20)
  userId    String   @map("user_id") @db.VarChar(20)
  date      DateTime @db.Date
  channelId String   @default("__global__") @map("channel_id") @db.VarChar(20)
  
  // Messages
  messagesSent      Int      @default(0) @map("messages_sent")
  messagesDeleted   Int      @default(0) @map("messages_deleted")
  messagesEdited    Int      @default(0) @map("messages_edited")
  deletedBySelf     Int      @default(0) @map("deleted_by_self")
  deletedByMod      Int      @default(0) @map("deleted_by_mod")
  
  // Vocal
  voiceMinutes      Int      @default(0) @map("voice_minutes")
  
  // Réactions
  reactionsGiven    Int      @default(0) @map("reactions_given")
  reactionsReceived Int      @default(0) @map("reactions_received")
  
  // Métadonnées activité
  peakHour          Int?     @map("peak_hour") @db.SmallInt
  firstMessageAt    DateTime? @map("first_message_at") @db.Timestamptz
  lastMessageAt     DateTime? @map("last_message_at") @db.Timestamptz

  @@id([guildId, userId, date, channelId])
  @@map("stats_daily")
  @@index([guildId, date(sort: Desc)])
  @@index([guildId, userId, date(sort: Desc)])
  @@index([guildId, channelId, date(sort: Desc)])
}

/// Stats mensuelles agrégées par membre
/// Pas de rétention (historique illimité)
model StatsMonthly {
  // Identification (PK composite)
  guildId   String   @map("guild_id") @db.VarChar(20)
  userId    String   @map("user_id") @db.VarChar(20)
  month     DateTime @db.Date  // Premier jour du mois
  
  // Totaux du mois
  totalMessages       Int     @default(0) @map("total_messages")
  totalVoiceMinutes   Int     @default(0) @map("total_voice_minutes")
  totalReactionsGiven Int     @default(0) @map("total_reactions_given")
  totalReactionsReceived Int  @default(0) @map("total_reactions_received")
  
  // Moyennes calculées
  avgMessagesPerDay   Decimal @map("avg_messages_per_day") @db.Decimal(10, 2)
  avgVoicePerDay      Decimal @map("avg_voice_per_day") @db.Decimal(10, 2)
  
  // Top channels du membre ce mois (JSON)
  topChannels         Json?   @map("top_channels") @db.JsonB

  @@id([guildId, userId, month])
  @@map("stats_monthly")
  @@index([guildId, month(sort: Desc)])
}
