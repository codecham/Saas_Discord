// apps/backend/src/modules/events/jobs/stats-aggregation.processor.ts

import { Process, Processor } from '@nestjs/bull';
import { Logger } from '@nestjs/common';
import type { Job } from 'bull';
import { MetricsAggregationService } from '../core/metrics-aggregation.service';

/**
 * üìä Processor pour l'agr√©gation des statistiques
 *
 * Ce processor √©coute la queue 'stats-aggregation' et traite les jobs
 * d'agr√©gation de m√©triques p√©riodiques.
 *
 * Jobs support√©s :
 * - aggregate-5min: Agr√©gation toutes les 5 minutes
 * - aggregate-hourly: Agr√©gation horaire
 * - aggregate-daily: Agr√©gation quotidienne
 */
@Processor('stats-aggregation')
export class StatsAggregationProcessor {
  private readonly logger = new Logger(StatsAggregationProcessor.name);

  constructor(private readonly metricsService: MetricsAggregationService) {}

  /**
   * Job d'agr√©gation toutes les 5 minutes
   *
   * Calcule les m√©triques pour une p√©riode de 5min et les sauvegarde
   * dans la table metrics_snapshots.
   *
   * Format du job.data :
   * {
   *   guildId: string,
   *   startTime: number (timestamp),
   *   endTime: number (timestamp)
   * }
   */
  @Process('aggregate-5min')
  async handleAggregate5Min(job: Job): Promise<void> {
    this.logger.log(`üîÑ D√©but job aggregate-5min (ID: ${job.id})`);

    try {
      const { guildId, startTime, endTime } = job.data;

      // Convertir les timestamps en Date
      const start = new Date(startTime);
      const end = new Date(endTime);

      this.logger.debug(
        `Agr√©gation 5min pour guild ${guildId}: ${start.toISOString()} ‚Üí ${end.toISOString()}`,
      );

      // √âTAPE 1 : Agr√©ger les m√©triques de la p√©riode
      const metrics = await this.metricsService.aggregatePeriod(
        guildId,
        start,
        end,
        '5min',
      );

      this.logger.debug(
        `M√©triques calcul√©es : ${metrics.totalMessages} messages, ${metrics.uniqueActiveUsers} users actifs`,
      );

      // √âTAPE 2 : Sauvegarder dans metrics_snapshots
      await this.metricsService.saveMetricsSnapshot(metrics);

      this.logger.log(
        `‚úÖ Job aggregate-5min termin√© (ID: ${job.id}) - ${metrics.totalMessages} messages agr√©g√©s`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur job aggregate-5min (ID: ${job.id}): ${error.message}`,
        error.stack,
      );
      throw error; // BullMQ va retry automatiquement
    }
  }

  /**
   * Job d'agr√©gation horaire
   *
   * Similaire √† aggregate-5min mais sur une p√©riode d'1 heure
   */
  @Process('aggregate-hourly')
  async handleAggregateHourly(job: Job): Promise<void> {
    this.logger.log(`üîÑ D√©but job aggregate-hourly (ID: ${job.id})`);

    try {
      const { guildId, startTime, endTime } = job.data;

      const start = new Date(startTime);
      const end = new Date(endTime);

      this.logger.debug(
        `Agr√©gation horaire pour guild ${guildId}: ${start.toISOString()} ‚Üí ${end.toISOString()}`,
      );

      // Agr√©ger sur 1 heure
      const metrics = await this.metricsService.aggregatePeriod(
        guildId,
        start,
        end,
        'hourly',
      );

      this.logger.debug(
        `M√©triques horaires : ${metrics.totalMessages} messages, ${metrics.totalVoiceMinutes} min vocal`,
      );

      // Sauvegarder
      await this.metricsService.saveMetricsSnapshot(metrics);

      this.logger.log(
        `‚úÖ Job aggregate-hourly termin√© (ID: ${job.id}) - ${metrics.totalMessages} messages agr√©g√©s`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur job aggregate-hourly (ID: ${job.id}): ${error.message}`,
        error.stack,
      );
      throw error;
    }
  }

  /**
   * Job d'agr√©gation quotidienne
   *
   * Similaire mais sur 24 heures
   */
  @Process('aggregate-daily')
  async handleAggregateDaily(job: Job): Promise<void> {
    this.logger.log(`üîÑ D√©but job aggregate-daily (ID: ${job.id})`);

    try {
      const { guildId, startTime, endTime } = job.data;

      const start = new Date(startTime);
      const end = new Date(endTime);

      this.logger.debug(
        `Agr√©gation quotidienne pour guild ${guildId}: ${start.toISOString()} ‚Üí ${end.toISOString()}`,
      );

      // Agr√©ger sur 24h
      const metrics = await this.metricsService.aggregatePeriod(
        guildId,
        start,
        end,
        'daily',
      );

      this.logger.debug(
        `M√©triques quotidiennes : ${metrics.totalMessages} messages, ${metrics.uniqueActiveUsers} users actifs`,
      );

      // Sauvegarder
      await this.metricsService.saveMetricsSnapshot(metrics);

      this.logger.log(
        `‚úÖ Job aggregate-daily termin√© (ID: ${job.id}) - ${metrics.totalMessages} messages agr√©g√©s`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur job aggregate-daily (ID: ${job.id}): ${error.message}`,
        error.stack,
      );
      throw error;
    }
  }
}
